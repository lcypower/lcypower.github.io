{"componentChunkName":"component---src-templates-category-template-js","path":"/posts","result":{"pageContext":{"currentCategory":"All","edges":[{"node":{"id":"1680cb90-8eaa-5a1c-b34a-a1c85f121a78","excerpt":"Controller란? 사용자의 요청(Request)가 도착하는 곳(End point)을 정의하는 곳이다. 대부분 로직은 서비스(Service) 에서 처리되며 Request / Response 응답만 처리한다. 사용자가 요청할 URL을 정의한다. 사용자가 요청할 Method를 정의한다. 데이터를 리턴할 수도 있고 view를 사용하여 웹페이지를 리턴할 수도 있다. Controller 사용법 @RestController 는 Restful api 에서 사용하는 컨트롤러이다. @Controller는 view를 이용해 웹 어플리케이션을 만들때 사용한다. @RequestMapping을 최상위 클래스에 선언하여 하위에 선언된 URL앞에 prefix로 이용할 수 있다. @RequestMapping(value = “/get”, method = RequestMethod.GET) 해당 어노테이션처럼 사용 가능하지만 @GetMapping(”/get”) 이렇게 간략하게 사용도 가능하다. Method는 G…","fields":{"slug":"/java4/"},"frontmatter":{"emoji":"/i_s.webp","categories":"springboot","title":"막 갈기는 스프링부트 - Controller","date":"January 03, 2025","thumbnail":"/c_s.webp","description":"Controller, Restful을 조져보자."}},"next":{"fields":{"slug":"/java3/"}},"previous":null},{"node":{"id":"084004e8-a068-569e-8d62-4b5e11ed3554","excerpt":"Git이란? 깃(Git)은 형상 관리 도구 중 하나이다. 파일의 변경사항을 추적하고 여러 명의 작업자들이 작업을 조율하기 위한 분산버전관리 시스템이다. Git의 장점 소스코드를 따로 주고 받을 필요가 없다. 소스코드의 변경이력이 남는다. 같은 소스코드를 여러 사람이 작업하더라도 보다 쉽게 합칠 수 있다. Github이란? 깃허브(Github)는 분산버전관리시스템(Git)을 사용하여 웹에서 사용할 수 있도록 개발된 웹호스팅서비스이다. 깃허브(Github)를 이용하기 위해서는 아래 링크에 가입하여 사용할 수 있으며, 무료로 사용이 가능하며 유료를 사용하여 추가적인 기능을 사용할 수 있다. GitHub: Where the world builds software Git 명령어 원격 저장소 주소 알아내기 github에 접속하여 해당 프로젝트에 [code]를 누르면 확인할 수 있다.  git config git에 대한 기본적인 설정을 하는 명령어다. 유저의 이름과 이메일을 설정하면 깃 레파지…","fields":{"slug":"/java3/"},"frontmatter":{"emoji":"/i_g.webp","categories":"git","title":"Github이란?","date":"January 01, 2025","thumbnail":"/c_ig.webp","description":"Github을 왜 사용하는지, 어떻게 사용하지 알아보자."}},"next":{"fields":{"slug":"/java2/"}},"previous":{"fields":{"slug":"/java4/"}}},{"node":{"id":"fb3f4c13-aab6-592c-a37e-054836745e1e","excerpt":"Maven? Gradle? 소스코드를 독립 소프트웨어로 가공하는 과정 또는 그 결과물을 만들 수 있도록 도와주는 빌드 도구이다. Maven은 xml 형태로 작성되고 Gradle은 Groovy로 작성되어 작성법이 다르다. 나는 주로 Maven을 쓴다. xml을 많이 사용해서 이게 더 익숙하다. Gradle을 사용하는 것도 별 문제는 없다. 작성법이 다를 뿐 용도는 똑같다. Lifecycle? 동작 방식이 정해져 있다. 미리 정해진 빌드 순서대로 빌드를 한다. Build : 일반적인 빌드 프로세스를 실행한다. Clean : 빌드된 프로젝트 파일들을 모두 삭제한다. Validate : 프로젝트가 올바른지 확인하고 정보사용여부를 확인한다. Complie : 프로젝트를 컴파일한다. Test : 유닛 테스트를 한다. Package : 컴파일된 소스와 리소스들을 설정된 형태의 파일로 배포할 수 있는 패키지(jar / war)를 만든다. Verify : 통합 테스트를 하여 품질을 확인한다. In…","fields":{"slug":"/java2/"},"frontmatter":{"emoji":"/i_m.webp","categories":"springboot maven","title":"pom.xml 메이븐 조지기","date":"January 01, 2025","thumbnail":"/c_im.webp","description":"pom.xml 메이븐(Maven)을 사용하여 프로젝트 설정 및 빌드를 해보자."}},"next":{"fields":{"slug":"/java1/"}},"previous":{"fields":{"slug":"/java3/"}}},{"node":{"id":"54d275c7-81b4-59da-9e98-1e9e5dc9f8cf","excerpt":"프로젝트 생성 인텔리제이 유료버전을 기반으로 작성한다. 인텔리제이 [파일 - 새로만들기 - 새 프로젝트]를 눌러서 새창이 뜬다.  이름(Name) : 프로젝트 이름 위치(Location) : 프로젝트 저장 위치 언어(Language) : 사용할 언어 타입(Type) : 라이브러리 의존성을 위한 도구를 설정 그룹(Group) : 패키지 이름의 앞쪽에 위치한 프리픽스. 보통 도메인을 거꾸로 사용. 아티펙트(Artifact) : 프로젝트 결과물의 이름이라고 볼 수 있다. 패키지이름(Package name) : 그룹 + 아티팩트를 기본으로 만들어지며 수정이 가능하다. JDK(Project SDK) : 사용할 SDK의 버전 Java : 사용할 자바의 버전 패키지 생성(Packaging) : 패키징 될 파일형태를 지정 다음~  Spring Boot : 스프링부트의 버전 종속성(Dependencies) : 사용할 라이브러리를 추가 Lombok은 getter/setter를 만들지 않고 어노테이션…","fields":{"slug":"/java1/"},"frontmatter":{"emoji":"/i_i.webp","categories":"springboot intellij","title":"SpringBoot 프로젝트 만들기","date":"January 01, 2025","thumbnail":"/c_is.webp","description":"intellij를 이용하여 스프링부트(Spring boot)의 프로젝트를 만들어 보자."}},"next":{"fields":{"slug":"/java/"}},"previous":{"fields":{"slug":"/java2/"}}},{"node":{"id":"0e734758-5351-5888-bae1-2d5e59a1b28f","excerpt":"SpringBoot(스프링부트)는 Java(자바)라는 언어로 만들어진 Web Application Framework(웹 어플리케이션 프레임워크)인 spring framework(스프링 프레임워크)를 좀더 쉽게 사용할 수 있도록 것이다. 이전의 Spring framwork(스프링 프레임워크)는 xml을 이용하여 설정등이 굉장이 까다롭고 가독성이 좋지 않았다. SpringBoot(스프링부트)가 나오면서 어노테이션을 이용하여 설정들이 간편해지고 러닝커브가 낮아졌다. 왜 사용하는가? 자바스크립트, 파이썬, 루비, 고랭등 많은 언어로 만들어진 웹 서비스들도 많이 있지만 좀더 안정적인 웹 서비스를 만들고 싶다면 스프링 부트를 쓰는것이 좋다고 생각한다. 국내에 대형 서비스들은 대부분 스프링을 사용하여 시스템을 운영하고 있다. 그리고 오래전부터 많은 사람들이 사용하여 굉장히 많은 정보와 사례들이 존재하여 운영에 도움이 많이 된다. 스프링 부트는 WAS를 내장시켜 설정이 간편하게 웹서비스를 구축할…","fields":{"slug":"/java/"},"frontmatter":{"emoji":"/i_s.webp","categories":"springboot","title":"Spring Boot란?","date":"December 31, 2024","thumbnail":"/c_s.webp","description":"스프링부트란 무엇이며, 왜 사용하는지, 어떠한 툴을 이용하여 개발하는지 알아보자."}},"next":null,"previous":{"fields":{"slug":"/java1/"}}}],"categories":["All","springboot","git","maven","intellij"]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}